{"meta":{"title":"闻道者|朝生夕死","subtitle":"记忆是掌心的水，不论你摊开还是握紧，终究还是会从指缝中一滴一滴流淌干净。只是，那水的凉意，却是可以让人始终无法忘记！","description":"碧血长枪，昨日少年！","author":"赖坤奇","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-04-17T06:47:35.356Z","updated":"2017-04-17T06:47:35.356Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-04-17T06:47:39.982Z","updated":"2017-04-17T06:47:39.982Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Tinker微信热修复框架接入","slug":"Tinker微信热修复框架接入","date":"2017-04-13T06:09:04.000Z","updated":"2017-04-13T07:44:12.475Z","comments":true,"path":"2017/04/13/Tinker微信热修复框架接入/","link":"","permalink":"http://yoursite.com/2017/04/13/Tinker微信热修复框架接入/","excerpt":"","text":"Android关于微信开源Tinker热修复接入 现在android开发百花齐放，各种技术栈层出不穷，生机勃勃。强大的开源社区，那些巨人们简直不能再帅，好好学习，共勉！ 简单收集了关于android热修复方案各大厂、牛人开源的方案。 关于热修复原理可以参考： QQ空间终端开发团队 安卓App热补丁动态修复技术介绍 Alibaba-AndFix Bug热修复框架原理及源码解析 Android热更新方案Robust Nuwa AndFix Tinker Robust 这方面的框架还有很多，列举了几个比较优秀的供小伙伴们参考；由于水平有限，深入理解请根据源码和作者文档了解学习。 本文介绍接入腾讯Tinker并实现运营期间下发patch实现修复目前接入tinker的方式有4种，Tinker-接入指南 github wiki中推荐gradle接入 gradle是推荐的接入方式，在gradle插件tinker-patch-gradle-plugin中我们帮你完成proguard、multiDex以及Manifest处理等工作。 命令行接入 命令行工具tinker-patch-cli.jar提供了基准包与新安装包做差异，生成补丁包的功能。具体的命令参数如下: TinkerPatch补丁管理后台 www.tinkerpatch.com 是第三方开发基于CDN分发的补丁管理后台。它提供了脚本后台托管，版本管理，保证传输安全等功能，让你无需搭建一个后台，无需关心部署操作，只需引入一个 SDK 即可立即使用 Tinker。该平台是第三方搭建，有付费渠道 腾讯bugly新版集成了Tinker热修复 热更新能力是Bugly为解决开发者紧急修复线上bug，而无需重新发版让用户无感知就能把问题修复的一项能力。Bugly目前采用微信Tinker的开源方案，开发者只需要集成我们提供的SDK就可以实现自动下载补丁包、合成、并应用补丁的功能，我们也提供了热更新管理后台让开发者对每个版本补丁进行管理。 公司一开始就是用的腾讯Bugly，异常上报和运营统计。最重要的是免费，还推出后台下发patch，免掉公司服务器端自建的成本开销。大赞！","categories":[],"tags":[]},{"title":"HelloWorld_关于转载郭林大神的android微状态栏视觉效果技术分享","slug":"HelloWorld-关于转载郭林大神的android微状态栏视觉效果技术分享","date":"2017-03-16T05:42:16.000Z","updated":"2017-04-13T05:43:27.571Z","comments":true,"path":"2017/03/16/HelloWorld-关于转载郭林大神的android微状态栏视觉效果技术分享/","link":"","permalink":"http://yoursite.com/2017/03/16/HelloWorld-关于转载郭林大神的android微状态栏视觉效果技术分享/","excerpt":"","text":"Hello World! Markdown学无止境，笑口常开,这是本小白练手markdown语法的转载内容，因内容同样丰富精彩，共勉! 关于转载 郭霖 大神的Android状态栏微技巧，带你真正理解沉浸式 模式（视觉效果技术分享） 转载地址http://blog.csdn.net/guolin_blog/article/details/51763825 记得之前有朋友在留言里让我写一篇关于沉浸式状态栏的文章，正巧我确实有这个打算，那么本篇就给大家带来一次沉浸式状态栏的微技巧讲解。 其实说到沉浸式状态栏这个名字我也是感到很无奈，真不知道这种叫法是谁先发起的。因为Android官方从来没有给出过沉浸式状态栏这样的命名，只有沉浸式模式（Immersive Mode）这种说法。而有些人在没有完全了解清楚沉浸模式到底是什么东西的情况下，就张冠李戴地认为一些系统提供的状态栏操作就是沉浸式的，并且还起了一个沉浸式状态栏的名字。 比如之前就有一个QQ群友问过我，像饿了么这样的沉浸式状态栏效果该如何实现？ 饿了么首页 这个效果其实就是让背景图片可以利用系统状态栏的空间，从而能够让背景图和状态栏融为一体。 本篇文章当中我会教大家如何实现这样的效果，但这个真的不叫沉浸式状态栏。因此，这算是一篇技术+普及的文章吧，讲技术的同时也纠正一下大家之前错误的叫法。 什么是沉浸式？先来分析一下叫错的原因吧，之所以很多人会叫错，是因为根本就不了解沉浸式是什么意思，然后就人云亦云跟着叫了。那么沉浸式到底是什么意思呢？ 根据百度百科上的定义，沉浸式就是要给用户提供完全沉浸的体验，使用户有一种置身于虚拟世界之中的感觉。 比如说现在大热的VR就是主打的沉浸式体验。 那么对应到Android操作系统上面，怎样才算是沉浸式体验呢？这个可能在大多数情况下都是用不到的，不过在玩游戏或者看电影的时候就非常重要了。因为游戏或者影视类的应用都希望能让用户完全沉浸在其中，享受它们提供的娱乐内容，但如果这个时候在屏幕的上方还显示一个系统状态栏的话，可能就会让用户分分钟产生跳戏的感觉。 那么我们来看一下比较好的游戏都是怎么实现的，比如说海岛奇兵： 海岛奇兵图 海岛奇兵的这种模式就是典型的沉浸式模式，它的整个屏幕中显示都是游戏的内容，没有状态栏也没有导航栏，用户玩游戏的时候就可以完全沉浸在游戏当中，而不会被一些系统的界面元素所打扰。 然后我们再来看一下爱奇艺的实现： 爱奇艺图 同样也是类似的，爱奇艺将整个屏幕作为影视的展示区，用户在看电影的时候眼中就只会有电影的内容，这样就不会被其他一些无关的东西所分心。 这才是沉浸式模式的真正含义，而所谓的什么沉浸式状态栏纯粹就是在瞎叫，完全都没搞懂“沉浸式” 这三个字是什么意思。 不过虽然听上去好像是很高大上的沉浸式效果，实际看上去貌似就是将内容全屏化了而已嘛。没错，Android沉浸式模式的本质就是全屏化，不过我们今天的内容并不仅限于此，因为还要实现饿了么那样的状态栏效果。那么下面我们就开始来一步步学习吧。 隐藏状态栏一个Android应用程序的界面上其实是有很多系统元素的，观察下图： android视图 可以看到，有状态栏、ActionBar、导航栏等。而打造沉浸式模式的用户体验，就是要将这些系统元素全部隐藏，只留下主体内容部分。 比如说我现在新建了一个空项目，然后修改布局文件中的代码，在里面加入一个ImageView，如下所示： &lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;ImageView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:src=&quot;@drawable/bg&quot; android:scaleType=&quot;centerCrop&quot; /&gt; &lt;/RelativeLayout&gt; 这里将ImageView的宽和高都设置成match_parent，让图片充满屏幕。现在运行一下程序，效果如下图所示。 如果你将图片理解成游戏或者电影界面的话，那这个体验离沉浸式就差得太远了，至少状态栏和ActionBar得要隐藏起来了吧？没关系，我们一步步进行优化，并且在优化中学习。 隐藏状态栏和ActionBar的方式在4.1系统之上和4.1系统之下还是不一样的，这里我就不准备考虑4.1系统之下的兼容性了，因为过于老的系统根本就没有提供沉浸式体验的支持。 修改MainActivity中的代码，如下所示： public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); View decorView = getWindow().getDecorView(); int option = View.SYSTEM_UI_FLAG_FULLSCREEN; decorView.setSystemUiVisibility(option); ActionBar actionBar = getSupportActionBar(); actionBar.hide(); } } 这里先调用getWindow().getDecorView()方法获取到了当前界面的DecorView，然后调用它的setSystemUiVisibility()方法来设置系统UI元素的可见性。其中，SYSTEM_UI_FLAG_FULLSCREEN表示全屏的意思，也就是会将状态栏隐藏。另外，根据Android的设计建议，ActionBar是不应该独立于状态栏而单独显示的，因此状态栏如果隐藏了，我们同时也需要调用ActionBar的hide()方法将ActionBar也进行隐藏。 现在重新运行一下程序，效果如下图所示。 效果图1 这样看上去就有点沉浸式效果的模样了。 虽说这才是正统的沉浸式含义，但有些朋友可能想实现的就是饿了么那样的状态栏效果，而不是直接把整个系统状态栏给隐藏掉，那么又该如何实现呢？ 其实也很简单，只需要借助另外一种UI Flag就可以了，如下所示： super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); if (Build.VERSION.SDK_INT &gt;= 21) { View decorView = getWindow().getDecorView(); int option = View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE; decorView.setSystemUiVisibility(option); getWindow().setStatusBarColor(Color.TRANSPARENT); } ActionBar actionBar = getSupportActionBar(); actionBar.hide(); 首先需要注意，饿了么这样的效果是只有5.0及以上系统才支持，因此这里先进行了一层if判断，只有系统版本大于或等于5.0的时候才会执行下面的代码。 接下来我们使用了SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN和SYSTEM_UI_FLAG_LAYOUT_STABLE，注意两个Flag必须要结合在一起使用，表示会让应用的主体内容占用系统状态栏的空间，最后再调用Window的setStatusBarColor()方法将状态栏设置成透明色就可以了。 现在重新运行一下代码，效果如下图所示。 效果图2 可以看到，类似于饿了么的状态栏效果就成功实现了。 再声明一次，这种效果不叫沉浸式状态栏，也完全没有沉浸式状态栏这种说法，我们估且可以把它叫做透明状态栏效果吧。 隐藏导航栏现在我们已经成功实现隐藏状态栏的效果了，不过屏幕下方的导航栏还比较刺眼，接下来我们就学习一下如何将导航栏也进行隐藏。 其实实现的原理都是一样的，隐藏导航栏也就是使用了不同的UI Flag而已，修改MainActivity中的代码，如下所示： super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); View decorView = getWindow().getDecorView(); int option = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN; decorView.setSystemUiVisibility(option); ActionBar actionBar = getSupportActionBar(); actionBar.hide(); 这里我们同时使用了SYSTEM_UI_FLAG_HIDE_NAVIGATION和SYSTEM_UI_FLAG_FULLSCREEN，这样就可以将状态栏和导航栏同时隐藏了。现在重新运行一下程序，效果如图所示。 效果图3 这次看上去好像终于是完全全屏化了，但其实上这离真正的沉浸式模式还差得比较远，因为在这种模式下，我们触摸屏幕的任意位置都会退出全屏。 效果图4 这显然不是我们想要的效果，因此这种模式的使用场景比较有限。 除了隐藏导航栏之外，我们同样也可以实现和刚才透明状态栏类似的效果，制作一个透明导航栏： super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); if (Build.VERSION.SDK_INT &gt;= 21) { View decorView = getWindow().getDecorView(); int option = View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE; decorView.setSystemUiVisibility(option); getWindow().setNavigationBarColor(Color.TRANSPARENT); getWindow().setStatusBarColor(Color.TRANSPARENT); } ActionBar actionBar = getSupportActionBar(); actionBar.hide(); 这里使用了SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION，表示会让应用的主体内容占用系统导航栏的空间，然后又调用了setNavigationBarColor()方法将导航栏设置成透明色。现在重新运行一下程序，效果如下图所示。 效果圖5 真正的沉浸式模式虽说沉浸式导航栏这个东西是被很多人误叫的一种称呼，但沉浸式模式的确是存在的。那么我们如何才能实现像海岛奇兵以及爱奇艺那样的沉浸式模式呢？ 首先你应该确定自己是否真的需要这个功能，因为除了像游戏或者视频软件这类特殊的应用，大多数的应用程序都是用不到沉浸式模式的。 当你确定要使用沉浸式模式，那么只需要重写Activity的onWindowFocusChanged()方法，然后加入如下逻辑即可： public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); } @Override public void onWindowFocusChanged(boolean hasFocus) { super.onWindowFocusChanged(hasFocus); if (hasFocus &amp;&amp; Build.VERSION.SDK_INT &gt;= 19) { View decorView = getWindow().getDecorView(); decorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_FULLSCREEN | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY); } } } 沉浸式模式的UI Flag就这些，也没什么好解释的，如果你需要实现沉浸式模式，直接将上面的代码复制过去就行了。需要注意的是，只有在Android 4.4及以上系统才支持沉浸式模式，因此这里也是加入了if判断。 另外，为了让我们的界面看上去更像是游戏，这里我将MainActivity设置成了横屏模式： &lt;activity android:name=&quot;.MainActivity&quot; android:screenOrientation=&quot;landscape&quot;&gt; ... &lt;/activity&gt; 这样我们就实现类似于海岛奇兵和爱奇艺的沉浸式模式效果了，如下图所示。 效果圖6 可以看到，界面默认情况下是全屏的，状态栏和导航栏都不会显示。而当我们需要用到状态栏或导航栏时，只需要在屏幕顶部向下拉，或者在屏幕右侧向左拉，状态栏和导航栏就会显示出来，此时界面上任何元素的显示或大小都不会受影响。过一段时间后如果没有任何操作，状态栏和导航栏又会自动隐藏起来，重新回到全屏状态。 这就是最标准的沉浸式模式。 关注我的技术公众号，每天都有优质技术文章推送。关注我的娱乐公众号，工作、学习累了的时候放松一下自己。 微信扫一扫下方二维码即可关注： 二維碼](http://img.blog.csdn.net/20160507110203928)![二維碼","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-03-12T08:22:40.000Z","updated":"2017-04-13T05:46:29.478Z","comments":true,"path":"2017/03/12/hello-world/","link":"","permalink":"http://yoursite.com/2017/03/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}